import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
	id 'java-library'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '2.0.91'

	id 'org.jetbrains.kotlin.jvm' version '2.1.21'
}

var ENV = System.getenv()

version = mod_version
group = mod_group_id
base.archivesName = "${mod_id}-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileKotlin.compilerOptions.jvmTarget = JvmTarget.JVM_21

neoForge {
	version = neo_version

	parchment {
		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_minecraft_version
	}

	runs {
		configureEach {
			systemProperty 'forge.logging.markers', 'REGISTRIES'

			logLevel = org.slf4j.event.Level.DEBUG
		}

		client {
			client()
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

			if (ENV.MC_CLIENT_ARGS) {
				programArguments.addAll(ENV.MC_CLIENT_ARGS.split(' '))
			}

			gameDirectory = file 'runs/client'
		}

		clientTwo {
			client()
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

			gameDirectory = file 'runs/client'

			if (ENV.MC_CLIENT_2_ARGS) {
				programArguments.addAll(ENV.MC_CLIENT_2_ARGS.split(' '))
			}
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

			gameDirectory = file 'runs/server'
		}

		gameTestServer {
			type = "gameTestServer"
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		data {
			data()

			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()

			gameDirectory = file 'runs/client'
		}
	}

	mods {
		"${mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

repositories {
	mavenLocal()

	maven {
		name = 'Kotlin for Forge'
		url = 'https://thedarkcolour.github.io/KotlinForForge/'
	}

	// For EMI
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

	// For Curios
	repositories {
		maven {
			name = "Illusive Soulworks maven"
			url = "https://maven.theillusivec4.top/"
		}
	}

	// For Modonomicon
	maven {
		url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
		content {
			includeGroup "com.klikli_dev"
		}
	}

}

dependencies {
	implementation "thedarkcolour:kotlinforforge-neoforge:${kff_version}"

	compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
	runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

	compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
	runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"

	implementation("com.klikli_dev:modonomicon-1.21.1-neoforge:${modonomicon_version}") { transitive = false }

}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			neo_version            : neo_version,
			neo_version_range      : neo_version_range,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_name               : mod_name,
			mod_license            : mod_license,
			mod_version            : mod_version,
			mod_authors            : mod_authors,
			mod_description        : mod_description,
			curios_version_range   : curios_version_range,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties
	}
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
