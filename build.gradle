plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.jetbrains.kotlin.jvm' version '2.0.0'
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

def ENV = System.getenv()
def isLocal = !ENV.containsKey("GITHUB_RUN_NUMBER")

version = "${mod_version}-${isLocal ? "local.${Instant.now().epochSecond}" : "build.${ENV.GITHUB_RUN_NUMBER}"}"
group = project.mod_group_id

def archiveName = "${mod_id.replace("_", "-")}-${minecraft_version}"
base.archivesName = archiveName

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println("Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}")

minecraft {
	mappings channel: mapping_channel, version: mapping_version
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		// REQUIRED for processResources to work in dev
		copyIdeResources = true

		"Client-One" {
			workingDirectory project.file('runs/client')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', mod_id

			if (ENV.MC_CLIENT_ARGS) {
				args ENV.MC_CLIENT_ARGS.tokenize()
			}

			mods {
				"$mod_id" {
					source sourceSets.main
				}
			}
		}

		"Client-Two" {
			workingDirectory project.file('runs/client')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', mod_id

			if (ENV.MC_CLIENT_2_ARGS) {
				args ENV.MC_CLIENT_2_ARGS.tokenize()
			}

			mods {
				"$mod_id" {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('runs/server')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				"$mod_id" {
					source sourceSets.main
				}
			}
		}

		gameTestServer {
			workingDirectory project.file('runs/server')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				"$mod_id" {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

			mods {
				"$mod_id" {
					source sourceSets.main
				}
			}
		}
	}
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }

repositories {
	maven {
		name = 'Kotlin for Forge'
		url = 'https://thedarkcolour.github.io/KotlinForForge/'
		content { includeGroup "thedarkcolour" }
	}

	// For Curios
	repositories {
		maven {
			name = "Illusive Soulworks maven"
			url = "https://maven.theillusivec4.top/"
		}
	}
}

dependencies {
	// Use the latest version of Minecraft Forge
	minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

	implementation "thedarkcolour:kotlinforforge:$kff_version"

	compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
	runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
		minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
		forge_version    : forge_version, forge_version_range: forge_version_range,
		mod_id           : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
		mod_authors      : mod_authors, mod_description: mod_description
]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project

	filesMatching(resourceTargets) {
		expand replaceProperties
	}
}

compileKotlin {
	kotlinOptions.jvmTarget = "17"
}

jar {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_authors,
				'Specification-Version'   : "1", // We are version 1 of ourselves
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_authors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// The below is only required if using 'maven-publish' and you want to publish to maven or use JitPack
jar.finalizedBy('reobfJar')

publishing {
	publications {
		mavenNeoForge(MavenPublication) {
			artifactId = archiveName
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL && ENV.MAVEN_USERNAME && ENV.MAVEN_TOKEN) {
			maven {
				url = ENV.MAVEN_URL
				credentials {
					username = ENV.MAVEN_USERNAME
					password = ENV.MAVEN_TOKEN
				}
			}
		}
	}
}

unifiedPublishing {
	project {
		displayName = "Irregular Implements ${project.minecraft_version} ${project.version}"
		releaseType = "beta"
		gameVersions = [project.minecraft_version]
		gameLoaders = ["neoforge"]

		changelog = "https://github.com/Berry-Club/Irregular-Implements/blob/master/CHANGELOG.md#" + project.mod_version.toString().replace(".", "")

		mainPublication jar

		relations {

			depends {
				curseforge = modrinth = "kotlin-for-forge"
			}

			depends {
				curseforge = modrinth = "curios"
			}

			optional {
				curseforge = modrinth = "modonomicon"
			}
		}

		if (ENV.CURSEFORGE_KEY) {
			curseforge {
				token = ENV.CURSEFORGE_KEY
				id = project.curseforge_id
			}
		}

		if (ENV.MODRINTH_TOKEN) {
			modrinth {
				token = ENV.MODRINTH_TOKEN
				id = project.modrinth_id
			}
		}

	}
}